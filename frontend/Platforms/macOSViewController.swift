//
//  ViewController.swift
//  frontend
//
//  Created by Eunsong on 2025-01-18.
//

import AgoraRtcKit
import Cocoa

class ViewController: NSViewController {
    static var shared: ViewController?
    
    // Local video view
    var localView: NSView!
    // Remote video view
    var remoteView: NSView!
    //RTC engine
    var agoraKit: AgoraRtcEngineKit!

    override func viewDidLayout() {
        super.viewDidLayout()

        if let screenFrame = NSScreen.main?.frame {
            // Centering the remote view (full screen)
            remoteView.frame = CGRect(
                x: (screenFrame.width - screenFrame.width) / 2,  // Horizontal center
                y: (screenFrame.height - screenFrame.height) / 2, // Vertical center
                width: screenFrame.width,  // Full screen width
                height: screenFrame.height // Full screen height
            )
            
            // Centering the local view (smaller view)
            let localViewWidth: CGFloat = 135
            let localViewHeight: CGFloat = 240
            localView.frame = CGRect(
                x: (screenFrame.width - localViewWidth) / 2, // Horizontal center
                y: (screenFrame.height - localViewHeight) / 2, // Vertical center
                width: localViewWidth, // Set the width of the local view
                height: localViewHeight // Set the height of the local view
            )
            }
    }

    func initView() {
        // Initialize the remote video window.
        remoteView = NSView()
        self.view.addSubview(remoteView)
        // Initialize the local video window.
        localView = NSView()
        self.view.addSubview(localView)

        // Initialize the RTC instance
        if let appId = ProcessInfo.processInfo.environment["APP_ID"]{
            print(appId)
            agoraKit = AgoraRtcEngineKit.sharedEngine(withAppId: appId, delegate: self)
        }else {
            print("APP ID INVALID")
        }
    }

    deinit {
        agoraKit.stopPreview()
        agoraKit.leaveChannel(nil)
        AgoraRtcEngineKit.destroy()
    }

    func startPreview() {
        let videoCanvas = AgoraRtcVideoCanvas()
        videoCanvas.view = localView
        videoCanvas.renderMode = .hidden
        agoraKit.setupLocalVideo(videoCanvas)
        agoraKit.startPreview()
    }

    func joinChannel() {
        let options = AgoraRtcChannelMediaOptions()
        // Set the channel scene to live broadcast
        options.channelProfile = .liveBroadcasting
        // Set the user role to anchor; if you want to set the user role to audience, keep the default value
        options.clientRoleType = .broadcaster
        // Publish the audio collected by the microphone
        options.publishMicrophoneTrack = true
        // Publish the video captured by the camera
        options.publishCameraTrack = true
        // Automatically subscribe to all audio streams
        options.autoSubscribeAudio = true
        // Automatically subscribe to all video streams
        options.autoSubscribeVideo = true
        // Use a temporary Token to join the channel, pass in your project's Token and channel name here
        // uid is 0, which means it is randomly generated by the engine; if successful, it triggers the didJoinChannel callback
        if let token = ProcessInfo.processInfo.environment["APP_TOKEN"],
           let cId = ProcessInfo.processInfo.environment["CHANNEL_NAME"],
           !cId.isEmpty,
           !token.isEmpty {
            agoraKit.joinChannel(byToken: token, channelId: cId, uid: 0, mediaOptions: options)
        }
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        print("Loading the view")
        initView()
        agoraKit.enableVideo()
        startPreview()
        joinChannel()
    }
    
    static func sharedInstance() -> ViewController {
         if shared == nil {
             shared = ViewController()
         }
         return shared!
     }

    
    func startVideoCallButtonPressed() {
        print("Button Pressed")
        initView()  // Initialize local & remote views and Agora engine
        
        guard agoraKit != nil else {
            // Handle case where Agora engine is not initialized
            print("Error: Agora engine not initialized.")
            return
        }

        agoraKit.enableVideo()  // Enable video functionality
        startPreview()  // Start the local preview
        joinChannel()  // Join the Agora channel
    }
}

extension ViewController: AgoraRtcEngineDelegate {

    //Callback when successfully joining the channel
    func rtcEngine(_ engine: AgoraRtcEngineKit, didJoinChannel channel: String, withUid uid: UInt, elapsed: Int) {
        print("didJoinChannel: (channel), uid: (uid)")
    }

    // Callback when a remote user or anchor joins the current channel
    func rtcEngine(_ engine: AgoraRtcEngineKit, didJoinedOfUid uid: UInt, elapsed: Int) {
        // Print debug information
        print("User (uid) joined after (elapsed) milliseconds")
        let videoCanvas = AgoraRtcVideoCanvas()
        videoCanvas.uid = uid
        videoCanvas.view = remoteView
        videoCanvas.renderMode = .hidden
        agoraKit.setupRemoteVideo(videoCanvas)
    }

    //Callback when the remote user or anchor leaves the current channel
    func rtcEngine(_ engine: AgoraRtcEngineKit, didOfflineOfUid uid: UInt, reason: AgoraUserOfflineReason) {
        // Print debug information
        print("User (uid) went offline due to (reason)")
        let videoCanvas = AgoraRtcVideoCanvas()
        videoCanvas.uid = uid
        videoCanvas.view = nil
        agoraKit.setupRemoteVideo(videoCanvas)
    }
}

